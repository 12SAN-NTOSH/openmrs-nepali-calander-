{"version":3,"file":"openmrs-esm-context.js","mappings":"gMAAAA,EAAOC,QAAUC,C,GCCbC,EAA2B,CAAC,EAGhC,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAaL,QAGrB,IAAID,EAASG,EAAyBE,GAAY,CAGjDJ,QAAS,CAAC,GAOX,OAHAO,EAAoBH,GAAUL,EAAQA,EAAOC,QAASG,GAG/CJ,EAAOC,OACf,CCrBAG,EAAoBK,EAAI,CAACR,EAASS,KACjC,IAAI,IAAIC,KAAOD,EACXN,EAAoBQ,EAAEF,EAAYC,KAASP,EAAoBQ,EAAEX,EAASU,IAC5EE,OAAOC,eAAeb,EAASU,EAAK,CAAEI,YAAY,EAAMC,IAAKN,EAAWC,IAE1E,ECNDP,EAAoBQ,EAAI,CAACK,EAAKC,IAAUL,OAAOM,UAAUC,eAAeC,KAAKJ,EAAKC,GCClFd,EAAoBkB,EAAKrB,IACH,oBAAXsB,QAA0BA,OAAOC,aAC1CX,OAAOC,eAAeb,EAASsB,OAAOC,YAAa,CAAEC,MAAO,WAE7DZ,OAAOC,eAAeb,EAAS,aAAc,CAAEwB,OAAO,GAAO,E,oKCL9D,MAAMC,EAAmBC,IACvB,IAAIC,EACJ,MAAMC,EAA4B,IAAIC,IAChCC,EAAW,CAACC,EAASC,KACzB,MAAMC,EAA+B,mBAAZF,EAAyBA,EAAQJ,GAASI,EACnE,IAAKnB,OAAOsB,GAAGD,EAAWN,GAAQ,CAChC,MAAMQ,EAAgBR,EACtBA,GAAoB,MAAXK,EAAkBA,EAA+B,iBAAdC,GAA0BA,EAAYrB,OAAOwB,OAAO,CAAC,EAAGT,EAAOM,GAC3GL,EAAUS,SAASC,GAAaA,EAASX,EAAOQ,IAClD,GAEII,EAAW,IAAMZ,EAajBa,EAAM,CAAEV,WAAUS,WAAUE,UAZfH,IACjBV,EAAUc,IAAIJ,GACP,IAAMV,EAAUe,OAAOL,IAUaM,QAR7B,KAEZC,QAAQC,KACN,0MAGJlB,EAAUmB,OAAO,GAInB,OADApB,EAAQD,EAAYI,EAAUS,EAAUC,GACjCA,CAAG,EAGZ,IADqBd,E,SCbRsB,GDawBtB,EAAcD,EAAgBC,GAAeD,ICbrB,W,MAAO,CAAC,C,KAErEwB,EAAAA,EAAAA,qBAAuC,sBAAuBD,GAE9D,IAAME,EAAUtC,SAST,SAASuC,EAAmCC,G,IAAmBC,EAAAA,UAAAA,OAAAA,QAAAA,IAAAA,UAAAA,GAAAA,UAAAA,GAAkBH,EACtFF,EAAalB,UAAS,SAACH,GACrB,GAAIyB,KAAazB,EACf,MAAM,IAAI2B,MACR,sCAAgD,OAAVF,EAAU,sGAKpD,OADAzB,EAAMyB,GAAaC,IAAiBH,EAAU,CAAC,EAAIG,EAC5C1B,CACT,GACF,CAMO,SAAS4B,EAAkBH,GAChCJ,EAAalB,UAAS,SAACH,GAIrB,OAHIyB,KAAazB,UACRA,EAAMyB,GAERzB,CACT,GACF,CAWO,SAAS6B,EACdJ,G,IACAK,EAAAA,UAAAA,OAAAA,QAAAA,IAAAA,UAAAA,GAAAA,UAAAA,GAAsC,SAAC9B,G,OAAUA,C,EAE3CA,EAAQqB,EAAaT,WAC3B,OAAIa,KAAazB,EACRf,OAAO8C,OAAO9C,OAAOwB,OAAO,CAAC,EAAIqB,EAAWA,EAAS9B,EAAMyB,IAAmBzB,EAAMyB,KAGtF,IACT,CAKO,SAASO,EAAiCP,EAAmBQ,GAClEZ,EAAalB,UAAS,SAACH,GAMrB,OALMyB,KAAazB,IACjBA,EAAMyB,GAAa,CAAC,GAGtBzB,EAAMyB,GAAaQ,EAAOjC,EAAMyB,IACzBzB,CACT,GACF,CAWO,SAASkC,EAAsCT,EAAmBU,GACvE,IAAIC,EAAWP,EAAcJ,GAK7B,OAFAU,EAASlD,OAAO8C,OAAO9C,OAAOwB,OAAO,CAAC,EAAG2B,KAElCf,EAAaP,WAAU,SAACd,GAC7B,IAAIqC,EAA0CZ,KAAazB,EAASA,EAAMyB,GAAmB,KAEzFY,IAAYD,IACdA,EAAWC,EACXF,EAASlD,OAAO8C,OAAO9C,OAAOwB,OAAO,CAAC,EAAG4B,KAE7C,GACF,C","sources":["webpack://@openmrs/esm-context/external system \"@openmrs/esm-state\"","webpack://@openmrs/esm-context/webpack/bootstrap","webpack://@openmrs/esm-context/webpack/runtime/define property getters","webpack://@openmrs/esm-context/webpack/runtime/hasOwnProperty shorthand","webpack://@openmrs/esm-context/webpack/runtime/make namespace object","webpack://@openmrs/esm-context/../../../node_modules/zustand/esm/vanilla.mjs","webpack://@openmrs/esm-context/./src/context.ts"],"sourcesContent":["module.exports = __WEBPACK_EXTERNAL_MODULE__685__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const createStoreImpl = (createState) => {\n  let state;\n  const listeners = /* @__PURE__ */ new Set();\n  const setState = (partial, replace) => {\n    const nextState = typeof partial === \"function\" ? partial(state) : partial;\n    if (!Object.is(nextState, state)) {\n      const previousState = state;\n      state = (replace != null ? replace : typeof nextState !== \"object\") ? nextState : Object.assign({}, state, nextState);\n      listeners.forEach((listener) => listener(state, previousState));\n    }\n  };\n  const getState = () => state;\n  const subscribe = (listener) => {\n    listeners.add(listener);\n    return () => listeners.delete(listener);\n  };\n  const destroy = () => {\n    if ((import.meta.env && import.meta.env.MODE) !== \"production\") {\n      console.warn(\n        \"[DEPRECATED] The `destroy` method will be unsupported in a future version. Instead use unsubscribe function returned by subscribe. Everything will be garbage-collected if store is garbage-collected.\"\n      );\n    }\n    listeners.clear();\n  };\n  const api = { setState, getState, subscribe, destroy };\n  state = createState(setState, getState, api);\n  return api;\n};\nconst createStore = (createState) => createState ? createStoreImpl(createState) : createStoreImpl;\nvar vanilla = (createState) => {\n  if ((import.meta.env && import.meta.env.MODE) !== \"production\") {\n    console.warn(\n      \"[DEPRECATED] Default export is deprecated. Instead use import { createStore } from 'zustand/vanilla'.\"\n    );\n  }\n  return createStore(createState);\n};\n\nexport { createStore, vanilla as default };\n","/** @module @category Context */\n'use strict';\n\nimport { createStore } from 'zustand/vanilla';\nimport { registerGlobalStore } from '@openmrs/esm-state';\n\ninterface OpenmrsAppContext {\n  [namespace: string]: unknown;\n}\n\n/**\n * @internal\n *\n * The application context store, using immer to potentially simplify updates\n */\nexport const contextStore = createStore<OpenmrsAppContext>()(() => ({}));\n\nregisterGlobalStore<OpenmrsAppContext>('openmrs-app-context', contextStore);\n\nconst nothing = Object();\n\n/**\n * Used by callers to register a new namespace in the application context. Attempting to register\n * an already-registered namespace will display a warning and make no modifications to the state.\n *\n * @param namespace the namespace to register\n * @param initialValue the initial value of the namespace\n */\nexport function registerContext<T extends {} = {}>(namespace: string, initialValue: T = nothing) {\n  contextStore.setState((state) => {\n    if (namespace in state) {\n      throw new Error(\n        `Attempted to re-register namespace ${namespace} in the app context. Each namespace must be unregistered before the name can be registered again.`,\n      );\n    }\n\n    state[namespace] = initialValue === nothing ? {} : initialValue;\n    return state;\n  });\n}\n\n/**\n * Used by caller to unregister a namespace in the application context. Unregistering a namespace\n * will remove the namespace and all associated data.\n */\nexport function unregisterContext(namespace: string) {\n  contextStore.setState((state) => {\n    if (namespace in state) {\n      delete state[namespace];\n    }\n    return state;\n  });\n}\n\nexport function getContext<T extends {} = {}>(namespace: string): Readonly<T> | null;\n/**\n * Returns an _immutable_ version of the state of the namespace as it is currently\n *\n * @typeParam T The type of the value stored in the namespace\n * @typeParam U The return type of this hook which is mostly relevant when using a selector\n * @param namespace The namespace to load properties from\n * @param selector An optional function which extracts the relevant part of the state\n */\nexport function getContext<T extends {} = {}, U extends {} = T>(\n  namespace: string,\n  selector: (state: Readonly<T>) => U = (state) => state as unknown as U,\n): Readonly<U> | null {\n  const state = contextStore.getState();\n  if (namespace in state) {\n    return Object.freeze(Object.assign({}, (selector ? selector(state[namespace] as T) : state[namespace]) as U));\n  }\n\n  return null;\n}\n\n/**\n * Updates a namespace in the global context. If the namespace does not exist, it is registered.\n */\nexport function updateContext<T extends {} = {}>(namespace: string, update: (state: T) => T) {\n  contextStore.setState((state) => {\n    if (!(namespace in state)) {\n      state[namespace] = {};\n    }\n\n    state[namespace] = update(state[namespace] as T);\n    return state;\n  });\n}\n\nexport type ContextCallback<T extends {} = {}> = (state: Readonly<T> | null | undefined) => void;\n\n/**\n * Subscribes to updates of a given namespace. Note that the returned object is immutable.\n *\n * @param namespace the namespace to subscribe to\n * @param callback a function invoked with the current context whenever\n * @returns A function to unsubscribe from the context\n */\nexport function subscribeToContext<T extends {} = {}>(namespace: string, callback: ContextCallback<T>) {\n  let previous = getContext<T>(namespace);\n\n  // set initial value\n  callback(Object.freeze(Object.assign({}, previous)));\n\n  return contextStore.subscribe((state) => {\n    let current: Readonly<T> | null | undefined = namespace in state ? (state[namespace] as T) : null;\n\n    if (current !== previous) {\n      previous = current;\n      callback(Object.freeze(Object.assign({}, current)));\n    }\n  });\n}\n"],"names":["module","exports","__WEBPACK_EXTERNAL_MODULE__685__","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","d","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","r","Symbol","toStringTag","value","createStoreImpl","createState","state","listeners","Set","setState","partial","replace","nextState","is","previousState","assign","forEach","listener","getState","api","subscribe","add","delete","destroy","console","warn","clear","contextStore","registerGlobalStore","nothing","registerContext","namespace","initialValue","Error","unregisterContext","getContext","selector","freeze","updateContext","update","subscribeToContext","callback","previous","current"],"sourceRoot":""}