{"version":3,"file":"openmrs-esm-state.js","mappings":"iFACA,IAAIA,EAAsB,CCA1BA,EAAwB,CAACC,EAASC,KACjC,IAAI,IAAIC,KAAOD,EACXF,EAAoBI,EAAEF,EAAYC,KAASH,EAAoBI,EAAEH,EAASE,IAC5EE,OAAOC,eAAeL,EAASE,EAAK,CAAEI,YAAY,EAAMC,IAAKN,EAAWC,IAE1E,ECNDH,EAAwB,CAACS,EAAKC,IAAUL,OAAOM,UAAUC,eAAeC,KAAKJ,EAAKC,GCClFV,EAAyBC,IACH,oBAAXa,QAA0BA,OAAOC,aAC1CV,OAAOC,eAAeL,EAASa,OAAOC,YAAa,CAAEC,MAAO,WAE7DX,OAAOC,eAAeL,EAAS,aAAc,CAAEe,OAAO,GAAO,G,8GCL9D,MAAMC,EAAmBC,IACvB,IAAIC,EACJ,MAAMC,EAA4B,IAAIC,IAChCC,EAAW,CAACC,EAASC,KACzB,MAAMC,EAA+B,mBAAZF,EAAyBA,EAAQJ,GAASI,EACnE,IAAKlB,OAAOqB,GAAGD,EAAWN,GAAQ,CAChC,MAAMQ,EAAgBR,EACtBA,GAAoB,MAAXK,EAAkBA,EAA+B,iBAAdC,GAA0BA,EAAYpB,OAAOuB,OAAO,CAAC,EAAGT,EAAOM,GAC3GL,EAAUS,SAASC,GAAaA,EAASX,EAAOQ,IAClD,GAEII,EAAW,IAAMZ,EAajBa,EAAM,CAAEV,WAAUS,WAAUE,UAZfH,IACjBV,EAAUc,IAAIJ,GACP,IAAMV,EAAUe,OAAOL,IAUaM,QAR7B,KAEZC,QAAQC,KACN,0MAGJlB,EAAUmB,OAAO,GAInB,OADApB,EAAQD,EAAYI,EAAUS,EAAUC,GACjCA,CAAG,EAENQ,EAAetB,GAAgBA,EAAcD,EAAgBC,GAAeD,EAClF,ICnBMwB,EAA+C,CAAC,EAkB/C,SAASC,EAAqBC,EAAcC,GACjD,IAAMC,EAAYJ,EAAgBE,GAElC,GAAIE,EAQF,OAPIA,EAAUC,OACZT,QAAQU,MAAM,mFAEdF,EAAU7B,MAAMM,SAASsB,GAAc,GAGzCC,EAAUC,QAAS,EACZD,EAAU7B,MAEjB,IAAMgC,EAAQR,KAAiB,W,OAAMI,C,IAOrC,OALAH,EAAgBE,GAAQ,CACtB3B,MAAOgC,EACPF,QAAQ,GAGHE,CAEX,CAUO,SAASC,EAAuBN,EAAcK,GACnD,IAAMH,EAAYJ,EAAgBE,GAElC,OAAIE,GACEA,EAAUC,OACZT,QAAQU,MAAM,mFAEdF,EAAU7B,MAAQgC,EAGpBH,EAAUC,QAAS,EACZD,EAAU7B,QAEjByB,EAAgBE,GAAQ,CACtB3B,MAAOgC,EACPF,QAAQ,GAGHE,EAEX,CAUO,SAASE,EAAkBP,EAAcQ,GAC9C,IAAMN,EAAYJ,EAAgBE,GAElC,IAAKE,EAAW,CACd,IAAMG,EAAQR,KAAiB,W,OAAMW,QAAAA,EAAkB,CAAC,C,IAKxD,OAJAV,EAAgBE,GAAQ,CACtB3B,MAAOgC,EACPF,QAAQ,GAEHE,CACT,CAEA,OAAOH,EAAU7B,KACnB,CAEO,SAASoC,EAAkBJ,EAAoBK,EAAyBC,GAC7E,IAAIC,EAAWF,EAAOL,EAAMjB,YAE5B,OAAOiB,EAAMf,WAAU,SAACd,GACtB,IAAMqC,EAAUH,EAAOlC,GAEnBqC,IAAYD,IACdA,EAAWC,EACXF,EAAOE,GAEX,GACF,C,OAtGAC,YAAW,WACa,gBAAlBC,OAAOC,SACTD,OAAO,OAAYjB,EAEvB,GAAG,K","sources":["webpack://@openmrs/esm-state/webpack/bootstrap","webpack://@openmrs/esm-state/webpack/runtime/define property getters","webpack://@openmrs/esm-state/webpack/runtime/hasOwnProperty shorthand","webpack://@openmrs/esm-state/webpack/runtime/make namespace object","webpack://@openmrs/esm-state/../../../node_modules/zustand/esm/vanilla.mjs","webpack://@openmrs/esm-state/./src/state.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const createStoreImpl = (createState) => {\n  let state;\n  const listeners = /* @__PURE__ */ new Set();\n  const setState = (partial, replace) => {\n    const nextState = typeof partial === \"function\" ? partial(state) : partial;\n    if (!Object.is(nextState, state)) {\n      const previousState = state;\n      state = (replace != null ? replace : typeof nextState !== \"object\") ? nextState : Object.assign({}, state, nextState);\n      listeners.forEach((listener) => listener(state, previousState));\n    }\n  };\n  const getState = () => state;\n  const subscribe = (listener) => {\n    listeners.add(listener);\n    return () => listeners.delete(listener);\n  };\n  const destroy = () => {\n    if ((import.meta.env && import.meta.env.MODE) !== \"production\") {\n      console.warn(\n        \"[DEPRECATED] The `destroy` method will be unsupported in a future version. Instead use unsubscribe function returned by subscribe. Everything will be garbage-collected if store is garbage-collected.\"\n      );\n    }\n    listeners.clear();\n  };\n  const api = { setState, getState, subscribe, destroy };\n  state = createState(setState, getState, api);\n  return api;\n};\nconst createStore = (createState) => createState ? createStoreImpl(createState) : createStoreImpl;\nvar vanilla = (createState) => {\n  if ((import.meta.env && import.meta.env.MODE) !== \"production\") {\n    console.warn(\n      \"[DEPRECATED] Default export is deprecated. Instead use import { createStore } from 'zustand/vanilla'.\"\n    );\n  }\n  return createStore(createState);\n};\n\nexport { createStore, vanilla as default };\n","/** @module @category Store */\nimport type { StoreApi } from 'zustand/vanilla';\nimport { createStore } from 'zustand/vanilla';\nimport type {} from '@openmrs/esm-globals';\n\ninterface StoreEntity {\n  value: StoreApi<unknown>;\n  active: boolean;\n}\n\nconst availableStores: Record<string, StoreEntity> = {};\n\n// spaEnv isn't available immediately. Wait a bit before making stores available\n// on window in development mode.\nsetTimeout(() => {\n  if (window.spaEnv === 'development') {\n    window['stores'] = availableStores;\n  }\n}, 1000);\n\n/**\n * Creates a Zustand store.\n *\n * @param name A name by which the store can be looked up later.\n *    Must be unique across the entire application.\n * @param initialState An object which will be the initial state of the store.\n * @returns The newly created store.\n */\nexport function createGlobalStore<T>(name: string, initialState: T): StoreApi<T> {\n  const available = availableStores[name];\n\n  if (available) {\n    if (available.active) {\n      console.error('Cannot override an existing store. Make sure that stores are only created once.');\n    } else {\n      available.value.setState(initialState, true);\n    }\n\n    available.active = true;\n    return available.value as StoreApi<T>;\n  } else {\n    const store = createStore<T>()(() => initialState);\n\n    availableStores[name] = {\n      value: store,\n      active: true,\n    };\n\n    return store;\n  }\n}\n\n/**\n * Registers an existing Zustand store.\n *\n * @param name A name by which the store can be looked up later.\n *    Must be unique across the entire application.\n * @param store The Zustand store to use for this.\n * @returns The newly registered store.\n */\nexport function registerGlobalStore<T>(name: string, store: StoreApi<T>): StoreApi<T> {\n  const available = availableStores[name];\n\n  if (available) {\n    if (available.active) {\n      console.error('Cannot override an existing store. Make sure that stores are only created once.');\n    } else {\n      available.value = store;\n    }\n\n    available.active = true;\n    return available.value as StoreApi<T>;\n  } else {\n    availableStores[name] = {\n      value: store,\n      active: true,\n    };\n\n    return store;\n  }\n}\n\n/**\n * Returns the existing store named `name`,\n * or creates a new store named `name` if none exists.\n *\n * @param name The name of the store to look up.\n * @param fallbackState The initial value of the new store if no store named `name` exists.\n * @returns The found or newly created store.\n */\nexport function getGlobalStore<T>(name: string, fallbackState?: T): StoreApi<T> {\n  const available = availableStores[name];\n\n  if (!available) {\n    const store = createStore<T>()(() => fallbackState ?? ({} as unknown as T));\n    availableStores[name] = {\n      value: store,\n      active: false,\n    };\n    return store;\n  }\n\n  return available.value as StoreApi<T>;\n}\n\nexport function subscribeTo<T, U>(store: StoreApi<T>, select: (state: T) => U, handle: (subState: U) => void) {\n  let previous = select(store.getState());\n\n  return store.subscribe((state) => {\n    const current = select(state);\n\n    if (current !== previous) {\n      previous = current;\n      handle(current);\n    }\n  });\n}\n"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","createStoreImpl","createState","state","listeners","Set","setState","partial","replace","nextState","is","previousState","assign","forEach","listener","getState","api","subscribe","add","delete","destroy","console","warn","clear","createStore","availableStores","createGlobalStore","name","initialState","available","active","error","store","registerGlobalStore","getGlobalStore","fallbackState","subscribeTo","select","handle","previous","current","setTimeout","window","spaEnv"],"sourceRoot":""}